generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Company {
  id            Int                   @id @default(autoincrement())
  title         String                @db.VarChar(100)
  email         String                @unique @db.VarChar(100)
  city          String                @db.VarChar(50)
  country       String                @db.VarChar(50)
  address       String                @db.VarChar(100)
  websiteUrl    String?               @db.VarChar(100)
  logo          String?               @db.VarChar(100)
  description   String?               @db.Text
  staff         Staff[]
  roles         Role[]
  clients       Client[]
  plans         TrainingPlan[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  subscriptions CompanySubscription[]
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @db.VarChar(50)
  description String?          @db.Text
  company     Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int
  staff       StaffRole[]
  permissions RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([companyId, name])
}

model Staff {
  id               Int               @id @default(autoincrement())
  firstName        String            @db.VarChar(50)
  lastName         String            @db.VarChar(50)
  email            String            @unique @db.VarChar(100)
  privateNumber    String            @unique @db.VarChar(11)
  password         String            @db.VarChar(255)
  phoneNumber      String            @unique @db.VarChar(20)
  isAdmin          Boolean           @default(false)
  salaryType       SalaryType
  lastActivityAt   DateTime?
  baseSalary       Decimal?          @db.Decimal(10, 2)
  commissionType   CommissionType?
  commissionAmount Decimal?          @db.Decimal(10, 2)
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId        Int
  roles            StaffRole[]
  permissions      StaffPermission[]
  customPlans      TrainingPlan[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  Salary           Salary[]
  activityLogs     ActivityLog[]
}

model Salary {
  id      Int      @id @default(autoincrement())
  staff   Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  staffId Int
  payDate DateTime
  bonus   Decimal? @db.Decimal(10, 2)
  netPay  Decimal  @db.Decimal(10, 2)
  total   Decimal  @db.Decimal(10, 2)
  taxes   Decimal? @db.Decimal(10, 2)
  taxType TaxType?
}

model StaffRole {
  staff     Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  staffId   Int
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([staffId, roleId])
}

model Permission {
  id        Int               @id @default(autoincrement())
  key       String            @db.VarChar(50)
  roles     RolePermission[]
  staff     StaffPermission[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([roleId, permissionId])
}

model StaffPermission {
  staff        Staff      @relation(fields: [staffId], references: [id], onDelete: Cascade)
  staffId      Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId Int
  granted      Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@id([staffId, permissionId])
}

model SuperUser {
  id             Int           @id @default(autoincrement())
  email          String        @unique @db.VarChar(100)
  password       String        @db.VarChar(255)
  lastActivityAt DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  activityLogs   ActivityLog[]
}

model Client {
  id             Int                 @id @default(autoincrement())
  firstName      String              @db.VarChar(50)
  lastName       String              @db.VarChar(50)
  privateNumber  String              @unique @db.VarChar(11)
  email          String              @unique @db.VarChar(100)
  phoneNumber    String?             @unique @db.VarChar(20)
  dateOfBirth    DateTime?
  lastActivityAt DateTime?
  password       String              @db.VarChar(255)
  gender         GenderType
  company        Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId      Int
  subscriptions  StaffSubscription[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  activityLogs   ActivityLog[]
}

model TrainingPlan {
  id                      Int                  @id @default(autoincrement())
  name                    String               @db.VarChar(100)
  description             String?              @db.Text
  durationType            TrainginPlanDuration
  durationAmount          Int
  price                   Decimal              @db.Decimal(10, 2)
  discountAmount          Decimal?             @db.Decimal(10, 2)
  discountType            DiscountType?
  trainerCommissionAmount Decimal?             @db.Decimal(10, 2)
  StaffCommissionType     StaffCommissionType?
  company                 Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId               Int
  staff                   Staff?               @relation(fields: [staffId], references: [id])
  staffId                 Int?
  subscriptions           StaffSubscription[]
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
}

model StaffSubscription {
  id               Int                  @id @default(autoincrement())
  client           Client               @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId         Int
  trainingPlan     TrainingPlan         @relation(fields: [trainingPlanId], references: [id])
  trainingPlanId   Int
  startDate        DateTime
  endDate          DateTime
  originalPrice    Decimal              @db.Decimal(10, 2)
  discountAmount   Decimal?             @db.Decimal(10, 2)
  discountType     DiscountType?
  totalPrice       Decimal              @db.Decimal(10, 2)
  durationType     TrainginPlanDuration
  numberOfCycles   Int
  pricePerCycle    Decimal              @db.Decimal(10, 2)
  commissionAmount Decimal?             @db.Decimal(10, 2)
  commissionType   StaffCommissionType?
  isActive         Boolean              @default(true)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
}

model CompanySubscription {
  id         Int      @id @default(autoincrement())
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  Int
  startDate  DateTime
  endDate    DateTime
  isActive   Boolean
  totalPrice Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([companyId])
  @@index([isActive])
}

model ActivityLog {
  id           Int                   @id @default(autoincrement())
  userId       Int
  actionType   ActivityLogActionType
  displayValue String                @db.VarChar(255)
  details      String?               @db.Text
  ipAddress    String?               @db.VarChar(45)
  requestUrl   String?               @db.VarChar(255)
  createdAt    DateTime              @default(now())
  userType     UserTypeEnum
  Staff        Staff?                @relation(fields: [staffId], references: [id])
  staffId      Int?
  SuperUser    SuperUser?            @relation(fields: [superUserId], references: [id])
  superUserId  Int?
  Client       Client?               @relation(fields: [clientId], references: [id])
  clientId     Int?

  @@index([userId])
  @@index([createdAt])
}

enum DiscountType {
  FIXED
  PERCENTAGE
}

enum GenderType {
  MALE
  FEMALE
}

enum SalaryType {
  FIXED
  COMMISSION
  COMBINED
}

enum CommissionType {
  PERCENTAGE
  FIXED
}

enum TaxType {
  FIXED
  PERCENTAGE
}

enum TrainginPlanDuration {
  MONTH
  DAY
}

enum StaffCommissionType {
  PERCENTAGE
  FIXED
}

enum ActivityLogActionType {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN
  LOGOUT
}

enum UserTypeEnum {
  STAFF
  CLIENT
  SUPERUSER
  ADMIN
  CRON_JOB
}
